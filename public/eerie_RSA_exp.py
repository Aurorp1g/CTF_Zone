from Crypto.Util.number import *
import gmpy2 as g
from hashlib import md5

'''低加密指数小明文，求第一部分'''
c1=27528752709372781693551004366113434327704364966327966920113025388926796768744682470041386868052048130473156235233339186242520091753843237368352496842819494105438389493904140079513323999807825961
e1=3
m1=g.iroot(c1,e1)[0]

'''共模攻击，求第二部分'''
c2 = 57759833095439932548929032355173977128055814411392871278525447238499198255131762911016950621597755676744124529654615332697148158364858793088308482252111010219325180722773181241427725010781167907766598041304824280786426399864293928708446535160603690193883778066146829602063397058591872667825084423994582952739
C2 = 125833879567603829472997469832639672082944929255438014095148199114259589079041705920285390696681067739294166723113861842341292475088350641990738527138272224063130673971984768633189217086321219116703740213157924297089706139330387995225875779975500347953323858654533018779318725831207548708859936604519275697200
n2=130549149634325998934371679372441877305654417728218277372812347216175714010949976506043489052602323484946527833025486931514892896144092697702747887712285987612213704341011964521388429778790977851167052801660525961166295744673414939170472668041781977595893453774403628628815443424490188961875827460096543600547
e2=17
e3=65537
s,s1,s2=g.gcdext(e2,e3)
m2=(pow(c2,s1,n2)*pow(C2,s2,n2))%n2

'''p高位泄露,求第三部分'''
'''
https://sagecell.sagemath.org/
 
#p4已知高位
p4 = 5658290878208013932006802720085715976996571136535678140342324023380213776742744788337411960180
n = 116662545522798722893275827592805290837338575225370322326893820720045572348830522763576413804861056978630559471454152633832329979917036126294342939685305794050617663883894705494591693017970891761801455755757300555988864501542743289811481012532168792014891940186182705863208247338340429673157385458363831238463
 
#全位数
pbits = 512
 
#缺省位数
kbits = pbits - p4.nbits()  #nbits()位数
print (p4.nbits())
p4 = p4 << kbits
PR.<x> = PolynomialRing(Zmod(n))
 
f = x + p4
x0 = f.small_roots(X=2^kbits, beta=0.4)[0]
p = p4+x0
print ("p: ", hex(int(p)))
assert n % p == 0
'''
c3=54367958849933200243179462444122523871491663312935351993323068511750118996062087190152015173394121762028285701153282290238606935019537485343711645316168503284124751816314774988383949340156555258402564393372354689757624797457471156036687040685106233116890561656032445139547018538521138133210859844566234792455
e3=65537
n3=116662545522798722893275827592805290837338575225370322326893820720045572348830522763576413804861056978630559471454152633832329979917036126294342939685305794050617663883894705494591693017970891761801455755757300555988864501542743289811481012532168792014891940186182705863208247338340429673157385458363831238463

p=0xad9b53775a8e93d4b711e7055dcb1ab264a9745e966e09374d31f2e11462e587a5cbc112232d747dcd5d3dd53747d1954f7d0bc753c5f6fbbe7d0c3d21753257
q=n3//p
phi=(p-1)*(q-1)
d=inverse(e3,phi)
m3=pow(c3,d,n3)

text=long_to_bytes(m1)+long_to_bytes(m2)+long_to_bytes(m3)
print(text, '\n')

'''md5加密'''
print(md5(text).hexdigest())